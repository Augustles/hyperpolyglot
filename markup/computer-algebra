//a side-by-side reference sheet//

[#grammar-invocation grammar and invocation] | [#var-expr variables and expressions] | [#arithmetic-logic arithmetic and logic] | [#strings strings] | [#regexes regexes] | [#arrays arrays] | [#sequences sequences] |  [#dictionaries dictionaries] | [#functions functions] | [#execution-control execution control] | [#files files] | [#libraries-namespaces libraries and namespaces] |  [#reflection reflection] _
  _
 [#symbolic-expr symbolic expressions] | [#equations-unknowns equations and unknowns] | [#optimization optimization] |  [#number-theory number theory] | [#permutations permutations] | [#groups groups] | [#vectors vectors] | [#matrices matrices] | [#distributions distributions] | [#univariate-charts univariate charts] | [#bivariate-charts bivariate charts] | [#trivariate-charts trivariate charts]

||~ ||~ [#mathematica mathematica]||~ [#sympy sympy]||~ [#gap gap]||~ [#singular singular]||
||[[# version-used]][#version-used-note version used] _
@<&nbsp;>@||##gray|//9.0//##||##gray|//Python 2.7; SymPy 0.7//##||##gray|//4.6//##||##gray|//4.0//##||
||[[# show-version]][#show-version-note show version] _
@<&nbsp;>@||##gray|//select// About Mathematica //in// Mathematica //menu//##||@@sympy.__version__@@||$ gap -h|| ||
||[[# implicit-prologue]][#implicit-prologue-note implicit prologue]|| ||import sympy _
 _
sympy.init_printing() _
x, y, z, w = sympy.symbols('x y z w')|| || ||
||||||||||~ [[# grammar-invocation]][#grammar-invocation-note grammar and invocation]||
||~ ||~ mathematica||~ sympy||~ gap||~ singular||
||[[# interpreter]][#interpreter-note interpreter] _
@<&nbsp;>@|| ||##gray|//if// foo.py //imports sympy://## _
$ python ##gray|//foo//##.py|| || ||
||[[# repl]][#repl-note repl] _
@<&nbsp;>@||$ math||$ python _
@@>>>@@ import sympy||$ gap||$ Singular||
||[[# block-delimiters]][#block-delimiters-note block delimiters] _
@<&nbsp;>@||( ##gray|//stmt//##; ##gray|//...//##)||: ##gray|//and offside rule//##|| || ||
||[[# stmt-separator]][#stmt-separator-note statement separator]||; ##gray|//or sometimes newline//## _
 _
; ##gray|//before a newline suppresses output//##||##gray|//newline or//## ; _
 _
##gray|//newlines not separators inside (), [], {}, triple quote literals, or after backslash: @@\@@//##||; _
 _
##gray|//use two semicolons to suppress output://## _
;;||;||
||[[# eol-comment]][#eol-comment-note end-of-line comment] _
@<&nbsp;>@||##gray|//none//##||1 + 1 ##gray|# addition##||1 + 1; ##gray|# addition##||// ##gray|//comment//##||
||[[# multiple-line-comment]][#multiple-line-comment-note multiple line comment] _
@<&nbsp;>@||1 + ##gray|(* addition *)## 1||##gray|//none//##||##gray|//none//##||/* ##gray|//comment line _
another comment//## */||
||||||||||~ [[# var-expr]][#var-expr-note variables and expressions]||
||~ ||~ mathematica||~ sympy||~ gap||~ singular||
||[[# assignment]][#assignment-note assignment]||a = 3 _
Set[a, 3]|| ||a := 3;|| ||
||[[# delayed-assignment]][#delayed-assignment-note delayed assignment]||a := x + 3 _
SetDelayed[a, x + 3]|| || || ||
||[[# parallel-assignment]][#parallel-assignment-note parallel assignment]||{a, b} = {3, 4} _
Set[{a, b}, {3, 4}]|| || || ||
||[[# compound-assignment]][#compound-assignment-note compound assignment]||+= -= *= /= _
##gray|//corresponding functions://## _
AddTo SubtractFrom TimeBy DivideBy|| || || ||
||[[# incr-decr]][#incr-decr-note increment and decrement]||++x @@--@@x _
PreIncrement[x] PreDecrement[x] _
x++ x@@--@@ _
Increment[x] Decrement[x]|| || || ||
||[[# null]][#null-note null] _
@<&nbsp;>@||Null|| || || ||
||[[# null-test]][#null-test-note null test] _
@<&nbsp;>@|| || || || ||
||[[# undef-var]][#undef-var-note undefined variable access] _
@<&nbsp;>@||##gray|//treated as an unknown number//##|| || || ||
||[[# rm-var-binding]][#rm-var-binding-note remove variable binding]||Clear[x] _
Remove[x]|| || || ||
||[[# cond-expr]][#cond-expr-note conditional expression] _
@<&nbsp;>@||If[x > 0, x, -x]|| || || ||
||||||||||~ [[# arithmetic-logic]][#arithmetic-logic-note arithmetic and logic]||
||~ ||~ mathematica||~ sympy||~ gap||~ singular||
||[[# true-false]][#true-false-note true and false] _
@<&nbsp;>@||True False||True False||true false|| ||
||[[# falsehoods]][#falsehoods-note falsehoods] _
@<&nbsp;>@||False||False 0 0.0|| || ||
||[[# logical-op]][#logical-op-note logical operators]||! True @@||@@ (True && False) _
Or[Not[True], And[True, False]]||sympy.Or(sympy.Not(True), sympy.And(True, False)) _
 _
##gray|# when arguments are symbols:## _
@@~ x | (y & z)@@||not true or (true and false)|| ||
||[[# relational-op]][#relational-op-note relational operators]||== != > < >= <= _
##gray|//corresponding functions://## _
Equal Unequal Greater Less GreaterEqual LessEqual||sympy.Eq sympy.Ne sympy.Gt sympy.Lt sympy.Ge sympy.Le _
 _
##gray|# when arguments are symbols:## _
== != > < >= <=||@@=@@ <> < > <= >=|| ||
||[[# arith-op]][#arith-op-note arithmetic operators]||+ - * / Quotient Mod _
##gray|//adjacent terms are multiplied, so * is not necessary.// Quotient //and// Mod //are functions, not binary infix operators.  These functions are also available://## _
Plus Subtract Times Divide||+ - * / ##gray|//??//## % _
 _
##gray|//if an expression contains a symbol, then the above operators are rewritten using the following classes://## _
sympy.Add sympy.Mul sympy.Pow sympy.Mod||+ - * / mod|| ||
||[[# int-div]][#int-div-note integer division] _
@<&nbsp;>@||Quotient[a, b]|| || || ||
||[[# int-div-zero]][#int-div-zero-note integer division by zero]||##gray|//dividend is zero://## _
Indeterminate _
##gray|//otherwise://## _
ComplexInfinity|| || || ||
||[[# float-div]][#float-div-note float division]||##gray|//exact division://## _
a / b|| || || ||
||[[# float-div-zero]][#float-div-zero-note float division by zero]||##gray|//dividend is zero://## _
Indeterminate _
##gray|//otherwise://## _
ComplexInfinity|| || || ||
||[[# power]][#power-note power]||2 ^ 16 _
Power[2, 16]||2 ** 16 _
sympy.Pow(2, 16)||2 ^ 16|| ||
||[[# sqrt]][#sqrt-note sqrt]||##gray|//returns symbolic expression://## _
Sqrt[2]||sympy.sqrt(2)|| || ||
||[[# sqrt-negative-one]][#sqrt-negative-one-note sqrt -1] _
@<&nbsp;>@||I||sympy.I|| || ||
||[[# transcendental-func]][#transcendental-func-note transcendental functions]||Exp Log _
Sin Cos Tan _
ArcSin ArcCos ArcTan _
ArcTan _
##gray|ArcTan //accepts 1 or 2 arguments//##||symp.exp sympy.log _
sympy.sin sympy.cos sympy.tan _
sympy.asin sympy.acos sympy.atan _
sympy.atan2|| || ||
||[[# transcendental-const]][#transcendental-const-note transcendental constants] _
##gray|//pi and the euler constant//##||Pi E||sympy.pi sympy.E|| || ||
||[[# float-truncation]][#float-truncation-note float truncation] _
##gray|//round towards zero, round to nearest integer, round down, round up//##||IntegerPart Round Floor Ceiling||sympy.floor _
sympy.ceiling|| || ||
||[[# absolute-val]][#absolute-val-note absolute value] _
##gray|//and signum//##||Abs Sign||sympy.Abs sympy.sign|| || ||
||[[# int-overflow]][#int-overflow-note integer overflow] _
@<&nbsp;>@||##gray|//none, has arbitrary length integer type//##||##gray|//none, has arbitrary length integer type//##||##gray|//none, has arbitrary length integer type//##|| ||
||[[# float-overflow]][#float-overflow-note float overflow] _
@<&nbsp;>@||##gray|//none//##|| || || ||
||[[# rational-construction]][#rational-construction-note rational construction]||2 / 7||sympy.Mul(2, sympy.Pow(7, -1))|| || ||
||[[# rational-decomposition]][#rational-decomposition-note rational decomposition] _
@<&nbsp;>@||Numerator[x/y] _
Denominator[x/y]||numer, denom = sympy.fraction(x, y)|| || ||
||[[# complex-construction]][#complex-construction-note complex construction] _
@<&nbsp;>@||1 + 3I||1 + 3 * sympy.I|| || ||
||[[# complex-decomposition]][#complex-decomposition-note complex decomposition] _
##gray|//real and imaginary part, argument and modulus, conjugate//##||Re Im _
Arg Abs _
Conjugate||sympy.re sympy.im _
sympy.Abs sympy.arg _
sympy.conjugate|| || ||
||[[# random-num]][#random-num-note random number] _
##gray|//uniform integer, uniform float//##||RandomInteger[{0, 99}] _
RandomReal[]|| || || ||
||[[# random-seed]][#random-seed-note random seed] _
##gray|//set, get//##||SeedRandom[17] _
##gray|//??//##|| || || ||
||[[# bit-op]][#bit-op-note bit operators]||BitAnd[5, 1] _
BitOr[5, 1] _
BitXor[5, 1] _
BitNot[5] _
BitShiftLeft[5, 1] _
BitShiftRight[5, 1]|| || || ||
||[[# binary-octal-hex-literals]][#binary-octal-hex-literals-note binary, octal, and hex literals]||2@@^^@@101010 _
8@@^^@@52 _
16@@^^@@2a|| || || ||
||[[# radix]][#radix-note radix]||BaseForm[42, 7] _
BaseForm[7^^60, 10]|| || || ||
||||||||||~ [[# strings]][#strings-note strings]||
||~ ||~ mathematica||~ sympy||~ gap||~ singular||
||[#string-literals string literals]||"don't say \"no\""||##gray|//use//## [[[scripting#strings|Python strings]]]||"don't say \"no\""|| ||
||[#string-newline newline in literal]||##gray|//yes//##|| || || ||
||[#string-escapes string literal escapes]||\\ \" \b \f \n \r \t \##gray|//ooo//##|| || || ||
||[#character-access character access]||Characters["hello"][[1]]|| || || ||
||[#chr-ord chr and ord]||FromCharacterCode[{65}] _
ToCharacterCode["A"][[1]]|| || || ||
||[#string-length length]||StringLength["hello"]|| || || ||
||[#string-concatenate concatenate]||"one " <> "two " <> "three"|| || || ||
||[#index-substring index of substring]||StringPosition["hello", "el"][[1]][[1]] _
##gray|StringPosition //returns an array of pairs, one for each occurrence of the substring.  Each pair contains the index of the first and last character of the occurrence.//##|| || || ||
||[#extract-substring extract substring]||StringTake["hello", {1, 4}]|| || || ||
||[#split split]||StringSplit["foo,bar,baz", ","]|| || || ||
||[#join join]||StringJoin[Riffle[{"foo", "bar", "baz"}, ","]]|| || || ||
||[#trim trim]||StringTrim[" foo "]|| || || ||
||[#number-string-conversion convert from string, to string]||7 + ToExpression["12"] _
73.9 + ToExpression[".037"] _
"value: " <> ToString[8]|| || || ||
||[#case-manipulation case manipulation]||ToUpperCase["foo"] _
ToLowerCase["FOO"]|| || || ||
||||||||||~ [[# regexes]][#regexes-note regular expressions]||
||~ ||~ mathematica||~ sympy||~ gap||~ singular||
||[#regex-match regex test]||re = RegularExpression["[a-z]+"] _
sc = StringCases["hello", re] _
Length[sc] > 0||##gray|//use//## [[[scripting#regexes|Python regular expressions]]]|| || ||
||[#regex-substitute regex substitution]||s = "foo bar bar" _
re = RegularExpression["bar"] _
StringReplace[s, re -> "baz", 1] _
StringReplace[s, re -> "baz"]|| || || ||
||||||||||~ [[# arrays]][#arrays-note arrays]||
||~ ||~ mathematica||~ sympy||~ gap||~ singular||
||[[# array-literal]][#array-literal-note literal]||{1, 2, 3} _
 _
List[1, 2, 3]||##gray|//use//## [[[scripting#arrays|Python lists]]]||[1, 2, 3]; _
 _
##gray|# creates array with gap at fourth index; _
# reading a[4] causes an error:## _
a := [1, 2, 3, , 5];|| ||
||[[# array-size]][#array-size-note size] _
@<&nbsp;>@||Length[{1, 2, 3}]|| ||Length([1, 2, 3]);|| ||
||[[# array-lookup]][#array-lookup-note lookup]||##gray|(* access time is O(1) *)## _
##gray|(* indices start at one: *)## _
{1, 2, 3}[[1]] _
 _
Part[{1, 2, 3}, 1]|| ||##gray|# indices start at one:## _
a := [1, 2, 3]; _
a[1];|| ||
||[[# array-update]][#array-update-note update] _
@<&nbsp;>@||a[[1]] = 7|| ||a[1] := 7;|| ||
||[[# array-out-of-bounds]][#array-out-of-bounds-note out-of-bounds behavior]||##gray|//left as unevaluated// Part[] //expression//##|| ||##gray|//Lookups result in errors; arrays can have gaps which also cause lookup errors. _
 _
An update will expand the array, possibly creating gaps.//##|| ||
||[[# array-element-index]][#array-element-index-note element index]||##gray|(* Position returns list of all positions: *)## _
First /@ Position[{7, 8, 9, 9}, 9]|| || || ||
||[[# array-slice]][#array-slice-note slice] _
@<&nbsp;>@||{1, 2, 3}[[1 ;; 2]]|| || || ||
||[[# array-of-integers-as-index]][#array-of-integers-as-index-note array of integers as index]||##gray|(* evaluates to {7, 9, 9} *)## _
{7, 8, 9}[[{1, 3, 3}]]|| || || ||
||[[# array-back]][#array-back-note manipulate back]||a = {6,7,8} _
AppendTo[a, 9] _
elem = a[[Length[a]]] _
a = Delete[a, Length[a]] _
elem|| ||a = [6, 7, 8]; _
Add(a, 9); _
elem := Remove(a);|| ||
||[[# array-front]][#array-front-note manipulate front]||a = {6,7,8} _
PrependTo[a, 5] _
elem = a[[1]] _
a = Delete[a, 1] _
elem|| || || ||
||[[# array-head]][#array-head-note head] _
@<&nbsp;>@||First[{1, 2, 3}]|| || || ||
||[[# array-tail]][#array-tail-note tail] _
@<&nbsp;>@||Rest[{1, 2, 3}]|| || || ||
||[[# array-cons]][#array-cons-note cons]||##gray|(* first arg must be an array *)## _
Prepend[{2, 3}, 1]|| || || ||
||[[# array-concatenate]][#array-concatenate-note concatenate] _
@<&nbsp;>@||Join[{1, 2, 3}, {4, 5, 6}]|| || || ||
||[[# array-replicate]][#array-replicate-note replicate] _
@<&nbsp;>@||ten_zeros = Table[0, {i, 0, 9}]|| || || ||
||[[# copy-array]][#copy-array-note copy] _
@<&nbsp;>@||a2 = a|| || || ||
||[[# iterate-over-array]][#iterate-over-array-note iterate] _
@<&nbsp;>@||Function[x, Print[x]] /@ {1, 2, 3}|| || || ||
||[[# reverse-array]][#reverse-array-note reverse] _
@<&nbsp;>@||Reverse[{1, 2, 3}]|| || || ||
||[[# sort-array]][#sort-array-note sort]||Sort[{3, 1, 4, 2}]|| || || ||
||[[# dedupe-array]][#dedupe-array-note dedupe] _
@<&nbsp;>@||Union[{1, 2, 2, 3}]|| ||Set([1, 2, 2, 3]);|| ||
||[[# membership]][#membership-note membership] _
@<&nbsp;>@||MemberQ[{1, 2, 3}, 2]|| || || ||
||[[# intersection]][#intersection-note intersection]||Intersect[{1, 2}, {2, 3, 4}]|| ||Intersection(Set([1, 2]), Set([2, 3, 4]));|| ||
||[[# union]][#union-note union] _
@<&nbsp;>@||Union[{1, 2}, {2, 3, 4}]|| ||Union(Set([1, 2]), Set([2, 3, 4]));|| ||
||[[# set-diff]][#set-diff-note relative complement, symmetric difference]||Complement[{1, 2, 3}, {2}] _
##gray|//none//##|| || || ||
||[[# map]][#map-note map]||Function[x, x x] /@ {1, 2, 3} _
 _
Map[Function[x, x x], {1, 2, 3}]|| || || ||
||[[# filter]][#filter-note filter] _
@<&nbsp;>@||Select[{1, 2, 3}, # > 2 &]|| || || ||
||[[# reduce]][#reduce-note reduce]||Fold[Plus, 0, {1, 2, 3}]|| || || ||
||[[# universal-existential-test]][#universal-existential-test-note universal and existential tests]||##gray|//none//##|| || || ||
||[[# min-max-elem]][#min-max-elem-note min and max element]||Min[{1, 2, 3}] _
Max[{1, 2, 3}]|| || || ||
||[[# shuffle-sample]][#shuffle-sample-note shuffle and sample]||x = {3, 7, 5, 12, 19, 8, 4} _
 _
RandomSample[x] _
RandomSample[x, 3]|| || || ||
||[[# zip]][#zip-note zip]||##gray|(* list of six elements: *)## _
Riffle[{1, 2, 3}, {"a", "b", "c"}]|| || || ||
||||||||||~ [[# sequences]][#sequences-note sequences]||
||~ ||~ mathematica||~ sympy||~ gap||~ singular||
||[#range range]||Range[1, 100]||range(1, 101)||[1 .. 100]|| ||
||[#arithmetic-sequence-integer arithmetic sequence of integers with difference 10]||Range[1, 100, 10]||range(1, 100, 10)||[1,11 .. 91]|| ||
||[#airthmetic-sequence-float arithmetic sequence of floats with difference 0.1]||Range[1, 100, .1]|| ||##gray|//none//##|| ||
||||||||||~ [[# dictionaries]][#dictionaries-note dictionaries]||
||~ ||~ mathematica||~ sympy||~ gap||~ singular||
||[#record-literal record literal]||r = { n -> 10, avg -> 3.7, sd -> 0.4}|| || || ||
||[#record-access record member access]||n /. r|| || || ||
||||||||||~ [[# functions]][#functions-note functions]||
||~ ||~ mathematica||~ sympy||~ gap||~ singular||
||[#function-definition define function]||Add[a_, b_] := a + b _
 _
##gray|(* alternate syntax: *)## _
Add = Function[{a, b}, a + b]|| || || ||
||[#function-invocation invoke function]||Add[3, 7] _
 _
Add @<@@>@ {3, 7} _
 _
##gray|(* syntax for unary functions: *)## _
2 @@//@@ Log|| || || ||
||undefine function||Clear[Add]|| || || ||
||redefine function||Add[a_, b_] := b + a|| || || ||
||overload function|| || || || ||
||missing function behavior||##gray|//The expression is left unevaluated.  The head is the function name as a symbol, and the parts are the arguments.//##|| || || ||
||missing argument behavior||##gray|//The expression is left unevaluated.  The head is the function name as a symbol, and the parts are the arguments.//##|| || || ||
||extra argument behavior|| || || || ||
||[#return-value return value]|| || || || ||
||[#function-value function value]|| || || || ||
||[#anonymous-function anonymous function]||Function[{a, b}, a + b] _
 _
(#1 + #2) &|| || || ||
||[#default-argument default argument]|| || || || ||
||[#variable-number-arguments variable number of arguments]|| || || || ||
||||||||||~ [[# execution-control]][#execution-control-note execution control]||
||~ ||~ mathematica||~ sympy||~ gap||~ singular||
||[#if if]||If[x > 0, _
@<&nbsp;&nbsp;>@Print["positive"], _
@<&nbsp;&nbsp;>@If[x < 0, _
@<&nbsp;&nbsp;>@@<&nbsp;&nbsp;>@Print["negative"], _
@<&nbsp;&nbsp;>@@<&nbsp;&nbsp;>@Print["zero"]]]||##gray|//use//## [http://hyperpolyglot.org/scripting#execution-control Python execution control]||if x > 0 then _
@<&nbsp;&nbsp;>@Print("positive\n"); _
elif x < 0 then _
@<&nbsp;&nbsp;>@Print("negative\n"); _
else _
@<&nbsp;&nbsp;>@Print("zero\n"); _
fi;|| ||
||[#while while]||i = 0 _
While[i < 10, Print[i]; i++]|| ||i := 0; _
while i < 10 do _
@<&nbsp;&nbsp;>@Print(i, "\n"); _
@<&nbsp;&nbsp;>@i := i + 1; _
od;|| ||
||[#for for]||For[i = 0, i < 10, i++, Print[i]]|| ||for i in [0..9] do _
@<&nbsp;&nbsp;>@Print(i, "\n"); _
od;|| ||
||[#break break]|| || ||a := [7, 3, 4, 5, 2]; _
first_even := 0; _
for i in [1..Length(a)] do _
@<&nbsp;&nbsp;>@if a[i] mod 2 = 0 then _
@<&nbsp;&nbsp;>@@<&nbsp;&nbsp;>@first_even := a[i]; _
@<&nbsp;&nbsp;>@@<&nbsp;&nbsp;>@break; _
@<&nbsp;&nbsp;>@fi; _
od;|| ||
||[#continue continue]|| || || || ||
||[#break-continue break/continue]||Break[] Continue[]|| ||break continue|| ||
||[#raise-exception raise exception]||Throw["failed"]|| || || ||
||[#handle-exception handle exception]||Print[Catch[Throw["failed"]]]|| || || ||
||||||||||~ [[# files]][#files-note files]||
||~ ||~ mathematica||~ sympy||~ gap||~ singular||
||[#write-stdout write to stdout]||Print["hello"]|| ||Print("hello");|| ||
||[#read-file-string-array read entire file into string or array]||s = Import["/etc/hosts"] _
a = StringSplit[s, "\n"]|| || || ||
||[#redirect-to-file redirect to file]|| || || || ||
||||||||||~ [[# libraries-namespaces]][#libraries-namespaces-note libraries and namespaces]||
||~ ||~ mathematica||~ sympy||~ gap||~ singular||
||[#load load]|| || ||Read('foo.g');|| ||
||||||||||~ [[# reflection]][#reflection-note reflection]||
||~ ||~ mathematica||~ sympy||~ gap||~ singular||
||[#list-function-documentation list function documentation]|| || || || ||
||[#function-documentation get function documentation]||?Tan _
Information[Tan]||print(sympy.solve.@@__doc__@@) _
 _
##gray|# in IPython:## _
sympy.solve? _
help(sympy.solve)|| || ||
||[#data-type query data type]||Head[x]|| || || ||
||[#list-variables list variables in scope]|| || || || ||
||||||||||~ [[# symbolic-expr]][#symbolic-expr-note symbolic expressions]||
||~ ||~ mathematica||~ sympy||~ gap||~ singular||
||[#numerical-approximation numerical approximation]||N[Exp[1]] _
Exp[1] + 0. _
N[Exp[1], 10]||sympy.N(sympy.E) _
sympy.N(sympy.E, 100)|| || ||
||[#expand-polynomial expand polynomial]||Expand[(1 + x)^5]||sympy.expand((1+x)@@**@@5)|| || ||
||[#factor-polynomial factor polynomial]||Factor[3 + 10 x + 9 x^2 + 2 x^3]||sympy.factor(3 + 10*x + 9*x@@**@@2 + 2*x@@**@@3)|| || ||
||collect terms||##gray|(* write as polynomial in x: *)## _
Collect[(1 + x + y)^3, x]||sympy.collect(sympy.expand((x+y+1)**3), x)|| || ||
||[#add-fractions add fractions]||Together[a/b + c/d]||sympy.together(x/y + z/w)|| || ||
||[#partial-fraction-decomposition partial fraction decomposition]||Apart[(b c + a d)/(b d)]||##gray|# only one symbol allowed in denominator:## _
sympy.apart((3*x+2) / (x*(x+1)))|| || ||
||eliminate sums and multiples inside trig functions||TrigExpand[Sin[2 x + y]]|| || || ||
||eliminate powers of trig functions||TrigReduce[Sin[x]^2]|| || || ||
||trig to complex exponential|| || || || ||
||complex exponential to trig|| || || || ||
||[#differentiation differentiation]||D[x^3 + x + 3, x]||sympy.diff(x@@**@@3 + x + 3, x)|| || ||
||[#higher-order-differentiation higher order differentiation]||D[Log[x], {x, 3}]||sympy.diff(sympy.log(x), x, 3)|| || ||
||unevaluated derivative||Hold[D[x^2, x]]||sympy.Derivative(x**2, x)|| || ||
||mixed partial derivative|| || || || ||
||power series||Series[Cos[x], {x, 0, 10}]|| || || ||
||[#antiderivative antiderivative]||Integrate[x^3 + x + 3, x]||sympy.integrate(x@@**@@3 + x + 3, x)|| || ||
||[#integration definite integral]||Integrate[x^3 + x + 3, {x, 0, 1}]||sympy.integrate(x@@**@@3 + x + 3, [x, 0, 1])|| || ||
||[#improper-integral improper integral]|| ||sympy.integrate(sympy.exp(-x), (x, 0, sympy.oo))|| || ||
||quick simplify|| || || || ||
||slow simplify|| || || || ||
||simplify with assumption||Assuming and Refine[]|| || || ||
||||||||||~ [[# equations-unknowns]][#equations-unknowns-note equations and unknowns]||
||~ ||~ mathematica||~ sympy||~ gap||~ singular||
||[#solution solution to an equation]||Solve[x^3 + x + 3 == 0, x]||solve(x@@**@@3 + x + 3, x)|| || ||
||[#solution-two-eqn solution to two equations]||Solve[x + y == 3 &&  x == 2y, _
@<&nbsp;&nbsp;>@{x, y}]||solve([x + y - 3, 3*x - 2*y], [x, y])|| || ||
||[#solve-diophantine solve diophantine equation]||Solve[a^2 + b^2 == c^2 && _
a > 0  && a < 10 && _
b > 0 && b < 10 && _
c > 0 && c < 10, _
{a, b, c}, Integers]|| || || ||
||||||||||~ [[# optimization]][#optimization-note optimization]||
||~ ||~ mathematica||~ sympy||~ gap||~ singular||
||[#minimize find minimal value]||Minimize[Sqrt[a^2 + x^2] + Sqrt[(b - x)^2 + c^2], x]|| || || ||
||||||||||~ [[# number-theory]][#number-theory-note number theory]||
||~ ||~ mathematica||~ sympy||~ gap||~ singular||
||[#number-tests number tests]||IntegerQ[7] _
PrimeQ[7] _
##gray|//rational test?//## _
##gray|//real test?//##|| ||IsInt(7); _
IsPrimeInt(7); _
IsRat(7);|| ||
||[#factorial factorial]||10!||factorial(10)|| || ||
||[#binomial-coefficient binomial coefficient]||Binomial[10,3]||binomial(10, 3)|| || ||
||[#gcd greatest common divisor]||GCD[14, 21]||gcd(14, 21)|| || ||
||[#prime-factors prime factors]||##gray|//returns// @<{{>@2, 2}, {3, 1}, {7, 1}}## _
FactorInteger[84]||factorint(84)|| || ||
||[#euler-totient Euler totient]||EulerPhi[256]|| ||Phi(256);|| ||
||||||||||~ [[# permutations]][#permutations-note permutations]||
||~ ||~ mathematica||~ sympy||~ gap||~ singular||
||create permutation from disjoint cycles||p = Cycles[@@{{1, 2}, {3, 4}}@@]||import sympy.combinatorics as combinatorics _
 _
p = combinatorics.Permutation(0, 1)(2, 3)||p := (1, 2)(3, 4);|| ||
||create permutation from list||p = PermutationCycles[{2, 1, 4, 3}]||import sympy.combinatorics as combinatorics _
 _
p = combinatorics.Permutation([1, 0, 3, 2])||p2 := PermList([2, 1, 4, 3]);|| ||
||permutation which transforms one list to another||FindPermutation[{a, b, c}, {b, c, a}]|| ||##gray|# must be positive integers:## _
p := MappingPermListList([6, 8, 4, 2], [2, 4, 6, 8])|| ||
||action of permutation on list element||p = Cycles[@@{{1, 2}, {3, 4}}@@] _
 _
PermutationReplace[1, p]||p(0)||1 ^ p; _
 _
##gray|# preimage of 1 under p:## _
1 / p;|| ||
||action of permutation on list||##gray|(* if list is too big, extra elements retain _
their positions; if list is too small, _
expression is left unevaluated. *)## _
Permute[{a, b, c, d}, p12n34]||a, b, c, d = sympy.symbols('a b c d') _
  _
p = combinatorics.Permutation(0, 1)(2, 3) _
p([a, b, c, d])|| || ||
||compose permutations||PermutationProduct[p13 = Cycles[@@{{1, 3}}@@] _
Cycles[p12n34, p13]||p1 = combinatorics.Permutation(0, 1)(2, 3) _
p2 = combinatorics.Permutation(0, 2) _
 _
p1 * p2||(1, 2)(3, 4) * (1, 3);|| ||
||invert permutation||InversePermutation[Cycles[{{1, 2, 3}}]]||p = combinatorics.Permutation(0, 1, 2) _
 _
p ** -1||(1, 2, 3) ^ -1;|| ||
||power of a permutation||PermutationPower[Cycles[{{1, 2, 3, 4, 5}}], 3]||p = combinatorics.Permutation(0, 1, 2, 3, 4) _
 _
p ** 3||(1, 2, 3, 4, 5) ^ 3;|| ||
||order of a permutation||PermutationOrder[Cycles[{{1, 2, 3, 4, 5}}]]||combinatorics.Permutation(0, 1, 2, 3, 4).order()|| || ||
||support of a permutation||PermutationSupport[Cycles[{{1, 3, 5}, {7, 8}}]]||p = combinatorics.Permutation(0, 2, 4)(6, 7) _
 _
p.support()||MovedPoints((1, 3, 5)(7, 8));|| ||
||number of inversions and parity|| || || || ||
||to inversion vector|| || || || ||
||from inversion vector|| || || || ||
||iterate over permutations|| || || || ||
||random permutation|| || || || ||
||||||||||~ [[# groups]][#groups-note groups]||
||~ ||~ mathematica||~ sympy||~ gap||~ singular||
||||||||||~ [[# vectors]][#vectors-note vectors]||
||~ ||~ mathematica||~ sympy||~ gap||~ singular||
||[[# vec-literal]][#vec-literal-note vector literal]||##gray|(* same as array: *)## _
{1, 2, 3}||##gray|# column vector:## _
sympy.Matrix([1, 2, 3])|| || ||
||[[# vec-coordinate]][#vec-coordinate-note vector coordinate]||##gray|//indices start at one://## _
{1,v2, 3}[[1]]|| || || ||
||[[# vec-dim]][#vec-dim-note vector dimension] _
@<&nbsp;>@||Length[{1, 2, 3}]|| || || ||
||[[# vec-element-wise]][#vec-element-wise-note element-wise arithmetic operators]||+ - * / _
##gray|//adjacent lists are multiplied element-wise//##|| || || ||
||[[# vec-length-mismatch]][#vec-length-mismatch-note vector length mismatch] _
@<&nbsp;>@||##gray|//error//##|| || || ||
||[[# vec-scalar]][#vec-scalar-note scalar multiplication]||3 {1, 2, 3} _
{1, 2, 3} 3 _
##gray|//* may also be used//##|| || || ||
||[[# vec-dot]][#vec-dot-note dot product]||{1, 1, 1} . {2, 2, 2} _
Dot[{1, 1, 1}, {2, 2, 2}]|| || || ||
||[[# vec-cross]][#vec-cross-note cross product]||Cross[{1, 0, 0}, {0, 1, 0}]|| || || ||
||[[# vec-norms]][#vec-norms-note norms]||Norm[{1, 2, 3}, 1] _
Norm[{1, 2, 3}] _
Norm[{1, 2, 3}, Infinity]|| || || ||
||||||||||~ [[# matrices]][#matrices-note matrices]||
||~ ||~ mathematica||~ sympy||~ gap||~ singular||
||literal—2d||##gray|(* used a nested array for each row: *)## _
@@{{@@1, 2}, {3, 4@@}}@@ _
 _
##gray|(* display as grid with aligned columns: *)## _
MatrixForm[@@{{@@1, 2}, {3, 4@@}}@@]|| || || ||
||construct from sequence—2d||ArrayReshape[{1, 2, 3, 4, 5, 6}, {2, 3}]|| || || ||
||[[# multidimensional-array-size]][#multidimensional-array-size-note size] _
##gray|//number of elements, number of dimensions, dimension lengths//##||a = {{1, 2, 3}, {4, 5, 6}} _
 _
Length[Flatten[a]] _
Length[Dimensions[a]] _
Dimensions[a]|| || || ||
||lookup—1d||{1, 2, 3}[[1]]|| || || ||
||lookup—2d||{{1, 2}, {3, 4}}[[1, 1]] _
 _
Part[{{1, 2}, {3, 4}}, 1, 1]|| || || ||
||[#matrix-literal-constructor literal or constructor]||A = @@{{@@1, 2}, {3, 4}} _
B = @@{{@@4, 3}, {2, 1}} _
 _
##gray|(* display in matrix form: *)## _
A // MatrixForm||A = sympy.Matrix([[1, 2], [3, 4]]) _
B = sympy.Matrix([[1, 2], [3, 4]])|| || ||
||[#common-matrices zero, identity, ones, diagonal matrix]||ConstantArray[0, {3, 3}] _
IdentityMatrix[3] _
ConstantArray[1, {3, 3}] _
DiagonalMatrix[{1, 2, 3}]||sympy.zeros(3) _
sympy.eye(3) _
sympy.ones(3) _
sympy.diag(1, 2, 3)|| || ||
||[#matrix-dimensions dimensions] _
##gray|//rows, columns//##||Length[A] _
Length[A[[1]]]|| || || ||
||[#matrix-access element access]||A[[1, 1]]|| || || ||
||[#matrix-row-access row access]||A[[1]]|| || || ||
||[#matrix-column-access column access]|| || || || ||
||[#submatrix-access submatrix access]||# [[1]] & /@ A|| || || ||
||[#matrix-scalar-multiplication scalar multiplication]||3 A _
A 3 _
##gray|//* can also be used//##|| || || ||
||[#matrix-element-wise-operators element-wise operators]||+ - * / _
##gray|//adjacent matrices are multiplied element-wise//##|| || || ||
||[#matrix-multiplication multiplication]||A . B|| || || ||
||[#kronecker-product kronecker product]||KroneckerProduct[A, B]|| || || ||
||[#matrix-comparison comparison]||A == B _
A != B|| || || ||
||[#matrix-norms norms]||Norm[A, 1] _
Norm[A] _
Norm[A, Infinity] _
Norm[A, "Frobenius"]|| || || ||
||[#matrix-transpose transpose]||Transpose[A]|| || || ||
||[#matrix-conjugate-transpose conjugate transpose]||A = @@{{@@I, 2 I}, {3 I, 4 I}} _
ConjugateTranspose[A]|| || || ||
||[#matrix-inverse inverse]||Inverse[A]|| || || ||
||[#matrix-determinant determinant]||Det[A]|| || || ||
||[#matrix-trace trace]||Tr[A]|| || || ||
||[#matrix-eigenvalues eigenvalues]||Eigenvalues[A]|| || || ||
||[#matrix-eigenvectors eigenvectors]||Eigenvectors[A]|| || || ||
||[#matrix-solution system of equations]||Solve[A. {x, y} == { 2, 3}, {x, y}]|| || || ||
||||||||||~ [[# distributions]][#distribution-note distributions]||
||~ ||~ mathematica||~ sympy||~ gap||~ singular||
||[#random-normal normal]||nd = NormalDistribution[0,1] _
RandomVariate[nd]|| || || ||
||[#random-exponential exponential]||ed = ExponentialDistribution[1] _
RandomVariate[ed]|| || || ||
||[#random-poisson poisson]||pd = PoissonDistribution[1] _
RandomVariate[pd]|| || || ||
||||||||||~ [[# univariate-charts]][#univariate-chart-note univariate charts]||
||~ ||~ mathematica||~ sympy||~ gap||~ singular||
||[[image http://farm5.static.flickr.com/4090/5039793334_f76edece33_m.jpg]] [#bar-chart vertical bar chart]||BarChart[{7, 3, 8, 5, 5}, _
@<&nbsp;&nbsp;>@ChartLegends-> _
@<&nbsp;&nbsp;&nbsp;&nbsp;>@{"a","b","c","d","e"}]|| || || ||
||[[image http://farm5.static.flickr.com/4092/5039776078_cc38a4ff5f_m.jpg]] _
[#horizontal-bar-chart horizontal bar chart]||BarChart[{7, 3, 8, 5, 5}, BarOrigin -> Left]|| || || ||
||[[image http://farm5.static.flickr.com/4145/5037819710_d932767cd5_m.jpg]] [#pie-chart pie chart]||PieChart[{7, 3, 8, 5, 5}]|| || || ||
||[[image http://farm5.static.flickr.com/4089/5037399669_13c8e585e0_m.jpg]] _
[#stem-and-leaf-plot stem-and-leaf plot]||Needs["StatisticalPlots@@`@@"] _
nd = NormalDistribution[0, 1] _
n100 = RandomVariate[nd, 100] _
StemLeafPlot[20 * n100]|| || || ||
||[[image http://farm5.static.flickr.com/4106/5037415497_4c6fbfcab2_m.jpg]] [#histogram histogram]||nd = NormalDistribution[0, 1] _
Histogram[RandomReal[nd, 100], 10]|| || || ||
||[[image http://farm5.static.flickr.com/4106/5037525393_7ac86e81c3_m.jpg]] [#box-and-whisker-plot box-and-whisker plot]||nd = NormalDistribution[0, 1] _
n100 = RandomVariate[nd, 100] _
BoxWhiskerChart[d] _
 _
ed = ExponentialDistribution[1] _
e100 = RandomVariate[ed, 100] _
u100 = RandomReal[1, 100] _
d = {n100, e100, u100} _
BoxWhiskerChart[d]|| || || ||
||[#univariate-title set chart title]||BoxWhiskerChart[data, _
@<&nbsp;&nbsp;>@PlotLabel -> "chart example"]|| || || ||
||[#chart-options chart options]||PlotLabel -> "an example" _
 _
AxisLabel -> {"time", "distance"}|| || || ||
||||||||||~ [[# bivariate-charts]][#bivariate-chart-note bivariate charts]||
||~ ||~ mathematica||~ sympy||~ gap||~ singular||
||[[image http://farm5.static.flickr.com/4154/5039126187_e340b3f4aa_m.jpg]] _
[#stacked-bar-chart stacked bar chart]||d = @@{{@@7, 1}, {3, 2}, {8, 1}, _
@<&nbsp;&nbsp;>@{5, 3}, {5, 1}} _
BarChart[d, ChartLayout -> _
@<&nbsp;&nbsp;>@"Stacked"]|| || || ||
||[[image http://farm6.static.flickr.com/5044/5267212089_a7749bbe3e_s.jpg]] [#scatterplot scatter plot]||nd = NormalDistribution[0, 1] _
rn = Function[RandomReal[nd]] _
d = {rn[],rn[]} & /@ Range[1,50] _
ListPlot[d]|| || || ||
||[[image http://farm6.static.flickr.com/5089/5267975488_2216ae147e_s.jpg]][#linear-regression-line linear regression line]||d = Table[{i, _
@<&nbsp;&nbsp;>@2 i + RandomReal[{-5, 5}]}, _
@<&nbsp;&nbsp;>@{i, 0, 20}] _
model = LinearModelFit[d, x, x] _
Show[ListPlot[d], _
@<&nbsp;&nbsp;>@Plot[model["BestFit"], _
@<&nbsp;&nbsp;>@@<&nbsp;&nbsp;>@{x, 0, 20}]]|| || || ||
||[[image http://farm6.static.flickr.com/5125/5267434941_f8537c9d26_s.jpg]] [#polygonal-plot polygonal line plot]||f = Function[i, {i, rn[]}] _
d = f /@ Range[1, 20] _
ListLinePlot[d]|| || || ||
||[[image http://farm6.static.flickr.com/5041/5268071368_75c3aee42e_t.jpg]] [#area-chart area chart]||d = @@{{@@7, 1, 3, 2, 8}, _
@<&nbsp;&nbsp;>@{1, 5, 3, 5, 1}} _
sd = {d[[1]], d[[1]] + d[[2]]} _
ListLinePlot[sd, Filling -> _
@<&nbsp;&nbsp;>@{1 -> {Axis, LightBlue}, _
@<&nbsp;&nbsp;&nbsp;>@2 -> @@{{@@1}, LightRed}}]|| || || ||
||[[image http://farm6.static.flickr.com/5049/5268229340_0b96b5e223_s.jpg]] [#cubic-spline cubic spline]||d = Table[{i, RandomReal[nd]}, _
@<&nbsp;&nbsp;>@{i, 0, 20}] _
f = Interpolation[d, _
@<&nbsp;&nbsp;>@InterpolationOrder -> 3] _
Show[ListPlot[d], _
@<&nbsp;&nbsp;>@Plot[f[x], {x, 0, 20}]]|| || || ||
||[[image http://farm6.static.flickr.com/5204/5268208606_b745646ea6_s.jpg]] [#function-plot function plot]||Plot[Sin[x], {x, -4, 4}]|| || || ||
||[[image http://farm6.static.flickr.com/5048/5267567389_27a19429e4_s.jpg]] [#qq-plot quantile-quantile plot]||nd = NormalDistribution[0, 1] _
d1 = RandomReal[1, 50] _
d2 = RandomReal[nd, 50] _
QuantilePlot[d1, d2]|| || || ||
||[#axis-label axis label]||d = Table[{i, i^2}, {i, 1, 20}] _
ListLinePlot[d, _
@<&nbsp;&nbsp;>@AxesLabel -> {x, x^2}]|| || || ||
||[#logarithmic-y-axis logarithmic y-axis]||LogPlot[{x^2, x^3, x^4, x^5}, _
@<&nbsp;&nbsp;>@{x, 0, 20}]|| || || ||
||||||||||~ [[# trivariate-charts]][#trivariate-chart-note trivariate charts]||
||~ ||~ mathematica||~ sympy||~ gap||~ singular||
||[#3d-scatter-plot 3d scatter plot]||nd = NormalDistribution[0,1] _
d = RandomReal[nd, {50, 3}] _
ListPointPlot3D[d]|| || || ||
||[[image http://farm6.static.flickr.com/5245/5268191292_a75a367c39_s.jpg]] [#additional-data additional data set]||nd = NormalDistribution[0, 1] _
x1 = RandomReal[nd, 20] _
x2 = RandomReal[nd, 20] _
ListLinePlot[{x1, x2}]|| || || ||
||[#bubble-chart bubble chart]||nd = NormalDistribution[0,1] _
d = RandomReal[nd, {50, 3}] _
BubbleChart[d]|| || || ||
||[#surface-plot surface plot]||Plot3D[Sinc[Sqrt[x^2 + y^2]], _
@<&nbsp;&nbsp;>@{x, -25, 25}, _
@<&nbsp;&nbsp;>@{y, -25, 25}]|| || || ||
||~ ||~ ##EFEFEF|@@_______________________________________________________@@##||~ ##EFEFEF|@@_______________________________________________________@@##||~ ##EFEFEF|@@_______________________________________________________@@##||~ ##EFEFEF|@@_______________________________________________________@@##||


[[# version-used-note]]
++ [#version-used version used]

The version of software used to check the examples in the reference sheet.

[[# show-version-note]]
++ [#show-version show version]

How to determine the version of an installation.

[[# implicit-prologue-note]]
++ [#implicit-prologue implicit prologue]

Code assumed to have been executed by the examples in the sheet.

**sympy:**



[[# grammar-invocation-note]]
+ [#grammar-invocation Grammar and Invocation]

[[# interpreter-note]]
++ [#interpreter interpreter]

How to execute a script.

[[# repl-note]]
++ [#repl repl]

How to launch a command line read-eval-print loop for the language.

**mathematica:**

One can create a REPL called //math// on Mac OS X with the following command:

[[code]]
$ sudo ln -s /Applications/Mathematica.app/Contents/MacOS/MathKernel /usr/local/bin/math

$ math 
[[/code]]

[[# block-delimiters-note]]
++ [#block-delimiters block delimiters]

How blocks are delimited.

[[# stmt-separator-note]]
++ [#stmt-separator statement separator]

How statements are separated.

[[# eol-comment-note]]
++ [#eol-comment end-of-line comment]

Character used to start a comment that goes to the end of the line.

[[# multiple-line-comment-note]]
++ [#multiple-line-comment multiple line comment]

[[# var-expr-note]]
+ [#var-expr Variables and Expressions]

[[# assignment-note]]
++ [#assignment assignment]

How to perform assignment.

In all three languages an assignment is an expression that evaluates to the right side of the expression.  Assignments can be chained to assign the same value to multiple variables.

**mathematica:**

The {{Set}} function behaves identically to assignment and can be nested:

[[code]]
Set[a, Set[b, 3]]
[[/code]]

[[# delayed-assignment-note]]
++ [#delayed-assignment delayed assignment]

How to assign an expression to a variable name.  The expression is re-evaluated each time the variable is used.

**mathematica:**

GNU make also supports assignment and delayed assignment, but {{=}} is used for delayed assignment and {{:=}} is used for immediate assignment.  This is the opposite of how Mathematica uses the symbols.

The POSIX standard for make only has {{=}} for delayed assignment.

[[# parallel-assignment-note]]
++ [#parallel-assignment parallel assignment]

How to assign values in parallel.

Parallel assignment can be used to swap the values held in two variables.

[[# compound-assignment-note]]
++ [#compound-assignment compound assignment]

The compound assignment operators.

[[# incr-decr-note]]
++ [#incr-decr increment and decrement]

[[# null-note]]
++ [#null null]

[[# null-test-note]]
++ [#null-test null test]

How to test if a value is null.

[[# undef-var-note]]
++ [#undef-var undefined variable access]

[[# rm-var-binding-note]]
++ [#rm-var-binding remove variable binding]

How to remove a variable.  Subsequent references to the variable will be treated as if the variable were undefined.

[[# cond-expr-note]]
++ [#cond-expr conditional expression]

A conditional expression.
[[# arithmetic-logic-note]]
+ [#arithmetic-logic Arithmetic and Logic]

[[# true-false-note]]
++ [#true-false true and false]

The boolean literals.

[[# falsehoods-note]]
++ [#falsehoods falsehoods]

Values which evaluate to false in a conditional test.

**sympy:**

Note that the logical operators {{Not}}, {{And}} and {{Or}} do not treat empty collections or {{None}} as false.  This is different from the Python logical operators {{not}}, {{and}}, and {{or}}.

[[# logical-op-note]]
++ [#logical-op logical operators]

The Boolean operators.

**sympy:**

In Python, {{&}}, {{|}}, and {{&}} are bit operators.  SymPy has defined {{@@__and__@@}}, {{@@__or__@@}}, and {{@@__invert__@@}} methods to make them Boolean operators for symbols, however.

[[# relational-op-note]]
++ [#relational-op relational operators]

The relational operators.

**sympy:**

The full SymPy names for the relational operators are:

[[code]]
sympy.Equality             # ==
sympy.Unequality           # !=
sympy.GreaterThan          # >=
sympy.LessThan             # <=
sympy.StrictGreaterThan    # >
sympy.StrictLessThan       # <
[[/code]]

The SymPy functions are attatched to the relational operators {{==}}, {{!=}}, for symbols ... using the methods {{@@__eq__@@}}, {{@@__ne__@@}}, {{@@__ge__@@}}, {{@@__le__@@}}, {{@@__gt__@@}}, {{@@__lt__@@}}.  The behavior they provide is similar to the default Python behavior, but when one of the arguments is a SymPy expression, a simplification will be attempted before the comparison is made.

[[# arith-op-note]]
++ [#arith-op arithmetic operators]

The arithmetic operators.

[[# int-div-note]]
++ [#int-div integer division]

How to compute the quotient of two integers.

[[# int-div-zero-note]]
++ [#int-div-zero integer division by zero]

The result of dividing an integer by zero.

[[# float-div-note]]
++ [#float-div float division]

How to perform float division, even if the arguments are integers.

[[# float-div-zero-note]]
++ [#float-div-zero float division by zero]

The result of dividing a float by zero.

[[# power-note]]
++ [#power power]

How to compute exponentiation.

Note that zero to a negative power is equivalent to division by zero, and negative numbers to a fractional power may have multiple complex solutions.

[[# sqrt-note]]
++ [#sqrt sqrt]

The square root function.

For positive arguments the positive square root is returned.

[[# sqrt-negative-one-note]]
++ [#sqrt-negative-one sqrt -1]

How the square root function handles negative arguments.

**mathematica:**

An uppercase {{I}} is used to enter the imaginary unit, but Mathematica displays it as a lowercase {{i}}.

[[# transcendental-func-note]]
++ [#transcendental-func transcendental functions]

The standard transcendental functions such as one might find on a scientific calculator.

The functions are the exponential (not to be confused with exponentiation), natural logarithm, sine, cosine, tangent, arcsine, arccosine, arctangent, and the two argument arctangent.

[[# transcendental-const-note]]
++ [#transcendental-const transcendental constants]

The transcendental constants //pi// and //e//.

The transcendental functions can used to computed to compute the transcendental constants:

[[code]]
pi = acos(-1)
pi = 4 * atan(1)
e = exp(1)
[[/code]]

[[# float-truncation-note]]
++ [#float-truncation float truncation]

Ways to convert a float to a nearby integer.

[[# absolute-val-note]]
++ [#absolute-val absolute value]

How to get the absolute value and signum of a number.

[[# int-overflow-note]]
++ [#int-overflow integer overflow]

What happens when the value of an integer expression cannot be stored in an integer.

The languages in this sheet all support arbitrary length integers so the situation does not happen.

[[# float-overflow-note]]
++ [#float-overflow float overflow]

What happens when the value of a floating point expression cannot be stored in a float.

[[# rational-construction-note]]
++ [#rational-construction rational construction]

How to construct a rational number.

[[# rational-decomposition-note]]
++ [#rational-decomposition rational decomposition]

How to extract the numerator and denominator from a rational number.

[[# complex-construction-note]]
++ [#complex-construction complex construction]

How to construct a complex number.

[[# complex-decomposition-note]]
++ [#complex-decomposition complex decomposition]

How to extract the real and imaginary part from a complex number; how to extract the argument and modulus; how to get the complex conjugate.

[[# random-num-note]]
++ [#random-num random number]

How to generate a random integer or a random float.

[[# random-seed-note]]
++ [#random-seed random seed]

How to set or get the random seed.

**mathematica:**

The seed is not set to the same value at start up.

[[# bit-op-note]]
++ [#bit-op bit operators]


[[# binary-octal-hex-literals-note]]
++ [#binary-octal-hex-literals binary, octal, and hex literals]

Binary, octal, and hex integer literals.

**mathematica:**

The notation works for any base from 2 to 36.

[[# strings-note]]
+ [#strings Strings]

[[# string-literals]]
++ string literals

[[# string-newline]]
++ newline in literal

[[# character-access]]
++ character access

[[# chr-ord]]
++ chr and ord

[[# string-length]]
++ length

[[# string-concatenate]]
++ concatenate

[[# index-substring]]
++ index of substring

[[# extract-substring]]
++ extract substring

[[# split]]
++ split

[[# number-string-conversion]]
++ convert from string, to string

How to convert strings to numbers and vice versa.


[[# join]]
++ join

[[# trim]]
++ trim

[[# case-manipulation]]
++ case manipulation

[[# sprintf]]
++ sprintf

[[# regexes-note]]
+ [#regexes Regular Expressions]

[[# regex-match]]
++ regex test

How to test whether a string matches a regular expression.

[[# regex-substitute]]
++ regex substitution

How to replace substrings which match a regular expression.

[[# arrays-note]]
+ [#arrays Arrays]

[[# array-literal-note]]
++ [#array-literal literal]

The notation for an array literal.

[[# array-size-note]]
++ [#array-size size]

The number of elements in the array.

[[# array-lookup-note]]
++ [#array-lookup lookup]

How to access an array element by its index.

[[# array-update-note]]
++ [#array-update update]

How to change the value stored at an array index.

[[# array-out-of-bounds-note]]
++ [#array-out-of-bounds out-of-bounds behavior]

What happens when an attempt is made to access an element at an out-of-bounds index.

[[# array-element-index-note]]
++ [#array-element-index element index]

How to get the index of an element in an array.

[[# array-slice-note]]
++ [#array-slice slice]

How to extract a subset of the elements.  The indices for the elements must be contiguous.

[[# array-of-integers-as-index-note]]
++ [#array-of-integers-as-index array of integers as index]

[[# array-back-note]]
++ [#array-back manipulate back]

[[# array-front-note]]
++ [#array-front manipulate front]

[[# array-head-note]]
++ [#array-head head]

[[# array-tail-note]]
++ [#array-tail tail]

[[# array-cons-note]]
++ [#array-cons cons]

[[# array-concatenate-note]]
++ [#array-concatenate concatenate]

[[# array-replicate-note]]
++ [#array-replicate replicate]

[[# copy-array-note]]
++ [#copy-array copy]

How to copy an array.  Updating the copy will not alter the original.

[[# iterate-over-array-note]]
++ [#iterate-over-array iterate]

[[# reverse-array-note]]
++ [#reverse-array reverse]

[[# sort-array-note]]
++ [#sort-array sort]

[[# dedupe-array-note]]
++ [#dedupe-array dedupe]

[[# membership-note]]
++ [#membership membership]

How to test whether a value is an element of a list.

[[# intersection-note]]
++ [#intersection intersection]

How to to find the intersection of two lists.

[[# union-note]]
++ [#union union]

How to find the union of two lists.

[[# set-diff-note]]
++ [#set-diff relative complement, symmetric difference]

How to find all elements in one list which are not in another; how to find all elements which are in one of two lists but not both.

[[# map-note]]
++ [#map map]

[[# filter-note]]
++ [#filter filter]

[[# reduce-note]]
++ [#reduce reduce]

[[# universal-existential-test-note]]
++ [#universal-existential-test universal and existential tests]

[[# min-max-elem-note]]
++ [#min-max-elem min and max element]

[[# shuffle-sample-note]]
++ [#shuffle-sample shuffle and sample]

How to shuffle an array. How to extract a random sample from an array without replacement.

[[# zip-note]]
++ [#zip zip]

How to interleave two arrays.
[[# sequences-note]]
+ [#sequences Sequences]


[[# dictionaries-note]]
+ [#dictionaries Dictionaries]

[[# record-literal]]
++ record literal


[[# record-access]]
++ record member access

[[# functions-note]]
+ [#functions Functions]

[[# definition]]
++ definition

[[# invocation]]
++ invocation

[[# function-value]]
++ function value

[[# execution-control-note]]
+ [#execution-control Execution Control]

[[# if]]
++ if

How to write a branch statement.

**mathematica:**

The 3rd argument (the else clause) of an //If// expression is optional.

[[# while]]
++ while

How to write a conditional loop.

**mathematica:**

//Do// can be used for a finite unconditional loop:

[[code]]
Do[Print[foo], {10}]
[[/code]]

[[# for]]
++ for

How to write a C-style for statement.

[[# break-continue]]
++ break/continue

How to break out of a loop.  How to jump to the next iteration of a loop.

[[# raise-exception]]
++ raise exception

How to raise an exception.

[[# handle-exception]]
++ handle exception

How to handle an exception.

[[# finally]]
++ finally block

How to write code that executes even if an exception is raised.

[[# files-note]]
+ [#files Files]

[[# libraries-namespaces-note]]
+ [#libraries-namespaces Libraries and Namespaces]

[[# reflection-note]]
+ [#reflection Reflection]

[[# function-documentation]]
++ function documentation

How to get the documentation for a function.

[[# symbolic-expr-note]]
+ [#symbolic-expr Symbolic Expressions]

[[# equations-unknowns-note]]
+ [#eqn Equations and Unknowns]

[[# optimization-note]]
+ [#optimization Optimization]

[[# number-theory-note]]
+ [#number-theory Number Theory]

[[# permutations-note]]
+ [#permutations Permutations]

[[# groups-note]]
+ [#groups Groups]

[[# vectors-note]]
+ [#vectors Vectors]

[[# vec-literal-note]]
++ [#vec-literal vector literal]

The notation for a vector literal.

[[# vec-coordinate-note]]
++ [#vec-coordinate vector coordinate]

How to get one of the coordinates of a vector.

[[# vec-dim-note]]
++ [#vec-dim vector dimension]

How to get the number of coordinates of a vector.

[[# vec-element-wise-note]]
++ [#vec-element-wise element-wise arithmetic operators]

How to perform an element-wise arithmetic operation on vectors.

[[# vec-length-mismatch-note]]
++ [#vec-length-mismatch vector length mismatch]

What happens when an element-wise arithmetic operation is performed on vectors of different dimension.

[[# vec-scalar-note]]
++ [#vec-scalar scalar multiplication]

How to multiply a scalar with a vector.

[[# vec-dot-note]]
++ [#vec-dot dot product]

How to compute the dot product of two vectors.

[[# vec-cross-note]]
++ [#vec-cross cross product]

How to compute the cross product of two three-dimensional vectors.

[[# vec-norms-note]]
++ [#vec-norms norms]

How to compute the norm of a vector.


[[# matrices-note]]
+ [#matrices Matrices]

[[# matrix-literal-constructor]]
++ literal or constructor

Literal syntax or constructor for creating a matrix.

**mathematica:**

Matrices are represented as lists of lists.  No error is generated if one of the rows contains too many or two few elements.  The //MatrixQ// predicate can be used to test whether a list of lists is matrix: i.e. all of the sublists contain numbers and are of the same length.

Matrices are displayed by Mathematica using list notation.  To see a matrix as it would be displayed in mathematical notation, use the //MatrixForm// function.

[[# matrix-dimensions]]
++ dimensions

How to get the dimensions of a matrix.

[[# matrix-access]]
++ element access

How to access an element of a matrix.  All languages described here follow the convention from mathematics of specifying the row index before the column index.

[[# matrix-row-access]]
++ row access

How to access a row.

[[# matrix-column-access]]
++ column access

How to access a column.

[[# submatrix-access]]
++ submatrix access

How to access a submatrix.

[[# matrix-scalar-multiplication]]
++ scalar multiplication

How to multiply a matrix by a scalar.

[[# matrix-element-wise-operators]]
++ element-wise operators

Operators which act on two identically sized matrices element by element.  Note that element-wise multiplication of two matrices is used less frequently in mathematics than matrix multiplication.

[[# matrix-multiplication]]
++ multiplication

How to multiply matrices.  Matrix multiplication should not be confused with element-wise multiplication of matrices.  Matrix multiplication in non-commutative and only requires that the number of columns of the matrix on the left match the number of rows of the matrix.  Element-wise multiplication, by contrast, is commutative and requires that the dimensions of the two matrices be equal.

[[# kronecker-product]]
++ kronecker product

The [http://en.wikipedia.org/wiki/Kronecker_product Kronecker product] is a non-commutative operation defined on any two matrices.  If A is m x n and B is p x q, then the Kronecker product is a matrix with dimensions mp x nq.

[[# matrix-comparison]]
++ comparison

How to test two matrices for equality.

[[# matrix-norms]]
++ norms

How to compute the 1-norm, the 2-norm, the infinity norm, and the frobenius norm.

[[# distribution-note]]
+ [#distributions Distributions]

[[# univariate-chart-note]]
+ [# univariate-charts Univariate Charts]

A univariate chart can be used to display a list or array of numerical values.  Univariate data can be displayed in a table with a single column or two columns if each numerical value is given a name.  A multivariate chart, by contrast, is used to display a list or array of //tuples// of numerical values.

In order for a list of numerical values to be meaningfully displayed in a univariate chart, it must be meaningful to perform comparisons (<, >, =) on the values.  Hence the values should have the same unit of measurement.

[[# bar-chart]]
++ vertical bar chart

A chart which represents values with rectangular bars which line up on the bottom.  It is a deceptive practice for the bottom not to represent zero, even if a y-axis with labelled tick marks or grid lines is provided.  A cut in the vertical axis and one of the bars may be desirable if the cut value is a large outlier.  Putting such a cut all of the bars near the bottom is a deceptive practice similar not taking to the base of the bars to be zero, however.

Another bad practice is the 3D bar chart.  In such a chart heights are represented by the height of what appear to be three dimensional blocks.  Such charts impress an undiscriminating audience but make it more difficult to make a visual comparison of the charted quantities.

**mathematica**

[[# horizontal-bar-chart]]
++ horizontal bar chart

A bar chart in which zero is the y-axis and the bars extend to the right.

[[# pie-chart]]
++ pie chart

A bar chart displays values using the areas of circular sectors or equivalently, the lengths of the arcs of those sectors.  A pie chart implies that the values are percentages of a whole.  The viewer is likely to make an assumption about what the whole circle represents.  Thus, using a pie chart to show the revenue of some companies in a line of business could be regarded as deceptive if there are other companies in the same line of business which are left out.  The viewer may mistakenly assume the whole circle represents the total market.

If two values are close in value, people cannot determine visually which of the corresponding sectors in a pie chart is larger without the aid of a protractor.  For this reason many consider bar charts superior to pie charts.

Many software packages make 3D versions of pie charts which communicate no additional information and in fact make it harder to interpret the data.

[[# stem-and-leaf-plot]]
++ stem-and-leaf plot

[[# histogram]]
++ histogram

[[# box-and-whisker-plot]]
++ box-and-whisker plot

[[# univariate-title]]
++ set chart title

[[# bivariate-chart-note]]
+ [#bivariate-charts Bivariate Charts]

[[# stacked-bar-chart]]
++ stacked bar chart

[[# trivariate-chart-note]]
+ [#trivariate-charts Trivariate Charts]

[[# mathematica]]
+ [#top Mathematica]

[http://reference.wolfram.com/mathematica/guide/Mathematica.html Mathematica Documentation Center]
[http://wolframalpha.com WolframAlpha]

[[# sympy]]
+ [#top SymPy]

[http://docs.sympy.org/latest/index.html Welcome to SymPy’s documentation!]

[[# gap]]
+ [#top GAP]

[http://www.gap-system.org/Manuals/doc/ref/chap0.html GAP - Reference Manual]

[[# singular]]
+ [#top Singular]

[http://www.singular.uni-kl.de/Manual/latest/index.htm Singular Manual]